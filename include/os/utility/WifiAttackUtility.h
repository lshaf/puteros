//
// Created by l-sha on 10/7/2025.
//

#pragma once

#include <WiFi.h>

typedef uint8_t MacAddr[6];

class WifiAttackUtility
{
public:
  WifiAttackUtility();
  ~WifiAttackUtility();
  esp_err_t deauthenticate(const MacAddr bssid, uint8_t channel);
  esp_err_t deauthenticate(const MacAddr ap, const MacAddr bssid, uint8_t channel);
  esp_err_t beacon_spam(const std::string& ssid, uint8_t channel);

private:
  esp_err_t change_channel(uint8_t channel) noexcept;
  esp_err_t send_packet(const uint8_t* packet, size_t len) noexcept;

  uint16_t sequence_number = 0;
  const uint8_t deauth_frame_default[26] = {
    0xc0, 0x00,                           // Frame Control + Flags
    0x3a, 0x01,                           // Duration
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff,   // Destination MAC (Broadcast)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // Source MAC (to be filled)
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00,   // BSSID (to be filled)
    0xf0, 0xff,                           // Sequence Control
    0x02, 0x00                            // Reason Code
  };

  // Beacon frame (109 bytes) - organized by field with index ranges
  uint8_t beaconPacket[109] = {
    // 0 - 3: Frame Control (management beacon)
    0x80, 0x00, 0x00, 0x00,
    // 4 - 9: Destination (broadcast)
    0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    // 10 - 15: Source MAC
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    // 16 - 21: BSSID
    0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
    // 22 - 23: Fragment & Sequence Number (handled by SDK)
    0x00, 0x00,
    // 24 - 31: Timestamp (8 bytes)
    0x83, 0x51, 0xF7, 0x8F, 0x0F, 0x00, 0x00, 0x00,
    // 32 - 33: Beacon interval (0xE8,0x03 => 1s)
    0xE8, 0x03,
    // 34 - 35: Capability information
    0x31, 0x00,
    // 36 - 69: SSID parameter set (Tag 0x00, length 32)
    0x00, 0x20,
    // SSID: 32 bytes (space character 0x20)
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    // 70 - 79: Supported Rates (Tag 0x01, length 8)
    0x01, 0x08,
    0x82, 0x84, 0x8B, 0x96, 0x24, 0x30, 0x48, 0x6C,
    // 80 - 82: Current Channel (Tag 0x03, length 1)
    0x03, 0x01, 0x01,
    // 83 - 100: RSN information (Tag 0x30, length 0x18)
    0x30, 0x18,
    0x01, 0x00,
    0x00, 0x0F, 0xAC, 0x02,
    0x02, 0x00,
    0x00, 0x0F, 0xAC, 0x04, 0x00, 0x0F, 0xAC, 0x04,
    // 101 - 106: Pairwise/AKM selectors
    0x01, 0x00,
    0x00, 0x0F, 0xAC, 0x02,
    // 107 - 108: Padding / vendor specific (zero)
    0x00, 0x00
  };

  uint8_t deauth_frame[sizeof(deauth_frame_default)];
};